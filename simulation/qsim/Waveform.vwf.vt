// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/22/2017 13:01:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Ramses
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Ramses_vlg_sample_tst(
	CargaA,
	CargaB,
	CargaC,
	CargaNZ,
	CargaPC,
	CargaRDM,
	CargaREM,
	CargaRI,
	CargaX,
	clk,
	clr,
	EnCount,
	IncPC,
	LidoMem,
	op0,
	op1,
	op2,
	RCount,
	s0,
	s1,
	s2,
	s3,
	sampler_tx
);
input  CargaA;
input  CargaB;
input  CargaC;
input  CargaNZ;
input  CargaPC;
input  CargaRDM;
input  CargaREM;
input  CargaRI;
input  CargaX;
input  clk;
input  clr;
input  EnCount;
input  IncPC;
input [7:0] LidoMem;
input  op0;
input  op1;
input  op2;
input  RCount;
input  s0;
input  s1;
input  s2;
input  s3;
output sampler_tx;

reg sample;
time current_time;
always @(CargaA or CargaB or CargaC or CargaNZ or CargaPC or CargaRDM or CargaREM or CargaRI or CargaX or clk or clr or EnCount or IncPC or LidoMem or op0 or op1 or op2 or RCount or s0 or s1 or s2 or s3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Ramses_vlg_check_tst (
	C,
	Count,
	N,
	PC,
	RA,
	RB,
	RDM,
	REM,
	RI,
	RX,
	Z,
	sampler_rx
);
input  C;
input [3:0] Count;
input  N;
input [7:0] PC;
input [7:0] RA;
input [7:0] RB;
input [7:0] RDM;
input [7:0] REM;
input [7:0] RI;
input [7:0] RX;
input  Z;
input sampler_rx;

reg  C_expected;
reg [3:0] Count_expected;
reg  N_expected;
reg [7:0] PC_expected;
reg [7:0] RA_expected;
reg [7:0] RB_expected;
reg [7:0] RDM_expected;
reg [7:0] REM_expected;
reg [7:0] RI_expected;
reg [7:0] RX_expected;
reg  Z_expected;

reg  C_prev;
reg [3:0] Count_prev;
reg  N_prev;
reg [7:0] PC_prev;
reg [7:0] RA_prev;
reg [7:0] RB_prev;
reg [7:0] RDM_prev;
reg [7:0] REM_prev;
reg [7:0] RI_prev;
reg [7:0] RX_prev;
reg  Z_prev;

reg  C_expected_prev;
reg [3:0] Count_expected_prev;
reg  N_expected_prev;
reg [7:0] PC_expected_prev;
reg [7:0] RA_expected_prev;
reg [7:0] RB_expected_prev;
reg [7:0] RDM_expected_prev;
reg [7:0] REM_expected_prev;
reg [7:0] RI_expected_prev;
reg [7:0] RX_expected_prev;
reg  Z_expected_prev;

reg  last_C_exp;
reg [3:0] last_Count_exp;
reg  last_N_exp;
reg [7:0] last_PC_exp;
reg [7:0] last_RA_exp;
reg [7:0] last_RB_exp;
reg [7:0] last_RDM_exp;
reg [7:0] last_REM_exp;
reg [7:0] last_RI_exp;
reg [7:0] last_RX_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	Count_prev = Count;
	N_prev = N;
	PC_prev = PC;
	RA_prev = RA;
	RB_prev = RB;
	RDM_prev = RDM;
	REM_prev = REM;
	RI_prev = RI;
	RX_prev = RX;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	C_expected_prev = C_expected;
	Count_expected_prev = Count_expected;
	N_expected_prev = N_expected;
	PC_expected_prev = PC_expected;
	RA_expected_prev = RA_expected;
	RB_expected_prev = RB_expected;
	RDM_expected_prev = RDM_expected;
	REM_expected_prev = REM_expected;
	RI_expected_prev = RI_expected;
	RX_expected_prev = RX_expected;
	Z_expected_prev = Z_expected;
end


// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected RI[ 7 ]
initial
begin
	RI_expected[7] = 1'bX;
end 
// expected RI[ 6 ]
initial
begin
	RI_expected[6] = 1'bX;
end 
// expected RI[ 5 ]
initial
begin
	RI_expected[5] = 1'bX;
end 
// expected RI[ 4 ]
initial
begin
	RI_expected[4] = 1'bX;
end 
// expected RI[ 3 ]
initial
begin
	RI_expected[3] = 1'bX;
end 
// expected RI[ 2 ]
initial
begin
	RI_expected[2] = 1'bX;
end 
// expected RI[ 1 ]
initial
begin
	RI_expected[1] = 1'bX;
end 
// expected RI[ 0 ]
initial
begin
	RI_expected[0] = 1'bX;
end 
// expected RDM[ 7 ]
initial
begin
	RDM_expected[7] = 1'bX;
end 
// expected RDM[ 6 ]
initial
begin
	RDM_expected[6] = 1'bX;
end 
// expected RDM[ 5 ]
initial
begin
	RDM_expected[5] = 1'bX;
end 
// expected RDM[ 4 ]
initial
begin
	RDM_expected[4] = 1'bX;
end 
// expected RDM[ 3 ]
initial
begin
	RDM_expected[3] = 1'bX;
end 
// expected RDM[ 2 ]
initial
begin
	RDM_expected[2] = 1'bX;
end 
// expected RDM[ 1 ]
initial
begin
	RDM_expected[1] = 1'bX;
end 
// expected RDM[ 0 ]
initial
begin
	RDM_expected[0] = 1'bX;
end 
// expected REM[ 7 ]
initial
begin
	REM_expected[7] = 1'bX;
end 
// expected REM[ 6 ]
initial
begin
	REM_expected[6] = 1'bX;
end 
// expected REM[ 5 ]
initial
begin
	REM_expected[5] = 1'bX;
end 
// expected REM[ 4 ]
initial
begin
	REM_expected[4] = 1'bX;
end 
// expected REM[ 3 ]
initial
begin
	REM_expected[3] = 1'bX;
end 
// expected REM[ 2 ]
initial
begin
	REM_expected[2] = 1'bX;
end 
// expected REM[ 1 ]
initial
begin
	REM_expected[1] = 1'bX;
end 
// expected REM[ 0 ]
initial
begin
	REM_expected[0] = 1'bX;
end 
// expected RA[ 7 ]
initial
begin
	RA_expected[7] = 1'bX;
end 
// expected RA[ 6 ]
initial
begin
	RA_expected[6] = 1'bX;
end 
// expected RA[ 5 ]
initial
begin
	RA_expected[5] = 1'bX;
end 
// expected RA[ 4 ]
initial
begin
	RA_expected[4] = 1'bX;
end 
// expected RA[ 3 ]
initial
begin
	RA_expected[3] = 1'bX;
end 
// expected RA[ 2 ]
initial
begin
	RA_expected[2] = 1'bX;
end 
// expected RA[ 1 ]
initial
begin
	RA_expected[1] = 1'bX;
end 
// expected RA[ 0 ]
initial
begin
	RA_expected[0] = 1'bX;
end 
// expected RB[ 7 ]
initial
begin
	RB_expected[7] = 1'bX;
end 
// expected RB[ 6 ]
initial
begin
	RB_expected[6] = 1'bX;
end 
// expected RB[ 5 ]
initial
begin
	RB_expected[5] = 1'bX;
end 
// expected RB[ 4 ]
initial
begin
	RB_expected[4] = 1'bX;
end 
// expected RB[ 3 ]
initial
begin
	RB_expected[3] = 1'bX;
end 
// expected RB[ 2 ]
initial
begin
	RB_expected[2] = 1'bX;
end 
// expected RB[ 1 ]
initial
begin
	RB_expected[1] = 1'bX;
end 
// expected RB[ 0 ]
initial
begin
	RB_expected[0] = 1'bX;
end 
// expected RX[ 7 ]
initial
begin
	RX_expected[7] = 1'bX;
end 
// expected RX[ 6 ]
initial
begin
	RX_expected[6] = 1'bX;
end 
// expected RX[ 5 ]
initial
begin
	RX_expected[5] = 1'bX;
end 
// expected RX[ 4 ]
initial
begin
	RX_expected[4] = 1'bX;
end 
// expected RX[ 3 ]
initial
begin
	RX_expected[3] = 1'bX;
end 
// expected RX[ 2 ]
initial
begin
	RX_expected[2] = 1'bX;
end 
// expected RX[ 1 ]
initial
begin
	RX_expected[1] = 1'bX;
end 
// expected RX[ 0 ]
initial
begin
	RX_expected[0] = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 

// expected C
initial
begin
	C_expected = 1'bX;
end 
// expected Count[ 3 ]
initial
begin
	Count_expected[3] = 1'bX;
end 
// expected Count[ 2 ]
initial
begin
	Count_expected[2] = 1'bX;
end 
// expected Count[ 1 ]
initial
begin
	Count_expected[1] = 1'bX;
end 
// expected Count[ 0 ]
initial
begin
	Count_expected[0] = 1'bX;
end 
// generate trigger
always @(C_expected or C or Count_expected or Count or N_expected or N or PC_expected or PC or RA_expected or RA or RB_expected or RB or RDM_expected or RDM or REM_expected or REM or RI_expected or RI or RX_expected or RX or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected Count = %b | expected N = %b | expected PC = %b | expected RA = %b | expected RB = %b | expected RDM = %b | expected REM = %b | expected RI = %b | expected RX = %b | expected Z = %b | ",C_expected_prev,Count_expected_prev,N_expected_prev,PC_expected_prev,RA_expected_prev,RB_expected_prev,RDM_expected_prev,REM_expected_prev,RI_expected_prev,RX_expected_prev,Z_expected_prev);
	$display("| real C = %b | real Count = %b | real N = %b | real PC = %b | real RA = %b | real RB = %b | real RDM = %b | real REM = %b | real RI = %b | real RX = %b | real Z = %b | ",C_prev,Count_prev,N_prev,PC_prev,RA_prev,RB_prev,RDM_prev,REM_prev,RI_prev,RX_prev,Z_prev);
`endif
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( Count_expected_prev[0] !== 1'bx ) && ( Count_prev[0] !== Count_expected_prev[0] )
		&& ((Count_expected_prev[0] !== last_Count_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Count_exp[0] = Count_expected_prev[0];
	end
	if (
		( Count_expected_prev[1] !== 1'bx ) && ( Count_prev[1] !== Count_expected_prev[1] )
		&& ((Count_expected_prev[1] !== last_Count_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Count_exp[1] = Count_expected_prev[1];
	end
	if (
		( Count_expected_prev[2] !== 1'bx ) && ( Count_prev[2] !== Count_expected_prev[2] )
		&& ((Count_expected_prev[2] !== last_Count_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Count_exp[2] = Count_expected_prev[2];
	end
	if (
		( Count_expected_prev[3] !== 1'bx ) && ( Count_prev[3] !== Count_expected_prev[3] )
		&& ((Count_expected_prev[3] !== last_Count_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Count_exp[3] = Count_expected_prev[3];
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( RA_expected_prev[0] !== 1'bx ) && ( RA_prev[0] !== RA_expected_prev[0] )
		&& ((RA_expected_prev[0] !== last_RA_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RA_exp[0] = RA_expected_prev[0];
	end
	if (
		( RA_expected_prev[1] !== 1'bx ) && ( RA_prev[1] !== RA_expected_prev[1] )
		&& ((RA_expected_prev[1] !== last_RA_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RA_exp[1] = RA_expected_prev[1];
	end
	if (
		( RA_expected_prev[2] !== 1'bx ) && ( RA_prev[2] !== RA_expected_prev[2] )
		&& ((RA_expected_prev[2] !== last_RA_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RA_exp[2] = RA_expected_prev[2];
	end
	if (
		( RA_expected_prev[3] !== 1'bx ) && ( RA_prev[3] !== RA_expected_prev[3] )
		&& ((RA_expected_prev[3] !== last_RA_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RA_exp[3] = RA_expected_prev[3];
	end
	if (
		( RA_expected_prev[4] !== 1'bx ) && ( RA_prev[4] !== RA_expected_prev[4] )
		&& ((RA_expected_prev[4] !== last_RA_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RA_exp[4] = RA_expected_prev[4];
	end
	if (
		( RA_expected_prev[5] !== 1'bx ) && ( RA_prev[5] !== RA_expected_prev[5] )
		&& ((RA_expected_prev[5] !== last_RA_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RA_exp[5] = RA_expected_prev[5];
	end
	if (
		( RA_expected_prev[6] !== 1'bx ) && ( RA_prev[6] !== RA_expected_prev[6] )
		&& ((RA_expected_prev[6] !== last_RA_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RA_exp[6] = RA_expected_prev[6];
	end
	if (
		( RA_expected_prev[7] !== 1'bx ) && ( RA_prev[7] !== RA_expected_prev[7] )
		&& ((RA_expected_prev[7] !== last_RA_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RA_exp[7] = RA_expected_prev[7];
	end
	if (
		( RB_expected_prev[0] !== 1'bx ) && ( RB_prev[0] !== RB_expected_prev[0] )
		&& ((RB_expected_prev[0] !== last_RB_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_expected_prev);
		$display ("     Real value = %b", RB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RB_exp[0] = RB_expected_prev[0];
	end
	if (
		( RB_expected_prev[1] !== 1'bx ) && ( RB_prev[1] !== RB_expected_prev[1] )
		&& ((RB_expected_prev[1] !== last_RB_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_expected_prev);
		$display ("     Real value = %b", RB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RB_exp[1] = RB_expected_prev[1];
	end
	if (
		( RB_expected_prev[2] !== 1'bx ) && ( RB_prev[2] !== RB_expected_prev[2] )
		&& ((RB_expected_prev[2] !== last_RB_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_expected_prev);
		$display ("     Real value = %b", RB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RB_exp[2] = RB_expected_prev[2];
	end
	if (
		( RB_expected_prev[3] !== 1'bx ) && ( RB_prev[3] !== RB_expected_prev[3] )
		&& ((RB_expected_prev[3] !== last_RB_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_expected_prev);
		$display ("     Real value = %b", RB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RB_exp[3] = RB_expected_prev[3];
	end
	if (
		( RB_expected_prev[4] !== 1'bx ) && ( RB_prev[4] !== RB_expected_prev[4] )
		&& ((RB_expected_prev[4] !== last_RB_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_expected_prev);
		$display ("     Real value = %b", RB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RB_exp[4] = RB_expected_prev[4];
	end
	if (
		( RB_expected_prev[5] !== 1'bx ) && ( RB_prev[5] !== RB_expected_prev[5] )
		&& ((RB_expected_prev[5] !== last_RB_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_expected_prev);
		$display ("     Real value = %b", RB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RB_exp[5] = RB_expected_prev[5];
	end
	if (
		( RB_expected_prev[6] !== 1'bx ) && ( RB_prev[6] !== RB_expected_prev[6] )
		&& ((RB_expected_prev[6] !== last_RB_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_expected_prev);
		$display ("     Real value = %b", RB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RB_exp[6] = RB_expected_prev[6];
	end
	if (
		( RB_expected_prev[7] !== 1'bx ) && ( RB_prev[7] !== RB_expected_prev[7] )
		&& ((RB_expected_prev[7] !== last_RB_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_expected_prev);
		$display ("     Real value = %b", RB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RB_exp[7] = RB_expected_prev[7];
	end
	if (
		( RDM_expected_prev[0] !== 1'bx ) && ( RDM_prev[0] !== RDM_expected_prev[0] )
		&& ((RDM_expected_prev[0] !== last_RDM_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_expected_prev);
		$display ("     Real value = %b", RDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RDM_exp[0] = RDM_expected_prev[0];
	end
	if (
		( RDM_expected_prev[1] !== 1'bx ) && ( RDM_prev[1] !== RDM_expected_prev[1] )
		&& ((RDM_expected_prev[1] !== last_RDM_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_expected_prev);
		$display ("     Real value = %b", RDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RDM_exp[1] = RDM_expected_prev[1];
	end
	if (
		( RDM_expected_prev[2] !== 1'bx ) && ( RDM_prev[2] !== RDM_expected_prev[2] )
		&& ((RDM_expected_prev[2] !== last_RDM_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_expected_prev);
		$display ("     Real value = %b", RDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RDM_exp[2] = RDM_expected_prev[2];
	end
	if (
		( RDM_expected_prev[3] !== 1'bx ) && ( RDM_prev[3] !== RDM_expected_prev[3] )
		&& ((RDM_expected_prev[3] !== last_RDM_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_expected_prev);
		$display ("     Real value = %b", RDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RDM_exp[3] = RDM_expected_prev[3];
	end
	if (
		( RDM_expected_prev[4] !== 1'bx ) && ( RDM_prev[4] !== RDM_expected_prev[4] )
		&& ((RDM_expected_prev[4] !== last_RDM_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_expected_prev);
		$display ("     Real value = %b", RDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RDM_exp[4] = RDM_expected_prev[4];
	end
	if (
		( RDM_expected_prev[5] !== 1'bx ) && ( RDM_prev[5] !== RDM_expected_prev[5] )
		&& ((RDM_expected_prev[5] !== last_RDM_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_expected_prev);
		$display ("     Real value = %b", RDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RDM_exp[5] = RDM_expected_prev[5];
	end
	if (
		( RDM_expected_prev[6] !== 1'bx ) && ( RDM_prev[6] !== RDM_expected_prev[6] )
		&& ((RDM_expected_prev[6] !== last_RDM_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_expected_prev);
		$display ("     Real value = %b", RDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RDM_exp[6] = RDM_expected_prev[6];
	end
	if (
		( RDM_expected_prev[7] !== 1'bx ) && ( RDM_prev[7] !== RDM_expected_prev[7] )
		&& ((RDM_expected_prev[7] !== last_RDM_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_expected_prev);
		$display ("     Real value = %b", RDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RDM_exp[7] = RDM_expected_prev[7];
	end
	if (
		( REM_expected_prev[0] !== 1'bx ) && ( REM_prev[0] !== REM_expected_prev[0] )
		&& ((REM_expected_prev[0] !== last_REM_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_expected_prev);
		$display ("     Real value = %b", REM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_REM_exp[0] = REM_expected_prev[0];
	end
	if (
		( REM_expected_prev[1] !== 1'bx ) && ( REM_prev[1] !== REM_expected_prev[1] )
		&& ((REM_expected_prev[1] !== last_REM_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_expected_prev);
		$display ("     Real value = %b", REM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_REM_exp[1] = REM_expected_prev[1];
	end
	if (
		( REM_expected_prev[2] !== 1'bx ) && ( REM_prev[2] !== REM_expected_prev[2] )
		&& ((REM_expected_prev[2] !== last_REM_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_expected_prev);
		$display ("     Real value = %b", REM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_REM_exp[2] = REM_expected_prev[2];
	end
	if (
		( REM_expected_prev[3] !== 1'bx ) && ( REM_prev[3] !== REM_expected_prev[3] )
		&& ((REM_expected_prev[3] !== last_REM_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_expected_prev);
		$display ("     Real value = %b", REM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_REM_exp[3] = REM_expected_prev[3];
	end
	if (
		( REM_expected_prev[4] !== 1'bx ) && ( REM_prev[4] !== REM_expected_prev[4] )
		&& ((REM_expected_prev[4] !== last_REM_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_expected_prev);
		$display ("     Real value = %b", REM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_REM_exp[4] = REM_expected_prev[4];
	end
	if (
		( REM_expected_prev[5] !== 1'bx ) && ( REM_prev[5] !== REM_expected_prev[5] )
		&& ((REM_expected_prev[5] !== last_REM_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_expected_prev);
		$display ("     Real value = %b", REM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_REM_exp[5] = REM_expected_prev[5];
	end
	if (
		( REM_expected_prev[6] !== 1'bx ) && ( REM_prev[6] !== REM_expected_prev[6] )
		&& ((REM_expected_prev[6] !== last_REM_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_expected_prev);
		$display ("     Real value = %b", REM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_REM_exp[6] = REM_expected_prev[6];
	end
	if (
		( REM_expected_prev[7] !== 1'bx ) && ( REM_prev[7] !== REM_expected_prev[7] )
		&& ((REM_expected_prev[7] !== last_REM_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_expected_prev);
		$display ("     Real value = %b", REM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_REM_exp[7] = REM_expected_prev[7];
	end
	if (
		( RI_expected_prev[0] !== 1'bx ) && ( RI_prev[0] !== RI_expected_prev[0] )
		&& ((RI_expected_prev[0] !== last_RI_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_expected_prev);
		$display ("     Real value = %b", RI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RI_exp[0] = RI_expected_prev[0];
	end
	if (
		( RI_expected_prev[1] !== 1'bx ) && ( RI_prev[1] !== RI_expected_prev[1] )
		&& ((RI_expected_prev[1] !== last_RI_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_expected_prev);
		$display ("     Real value = %b", RI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RI_exp[1] = RI_expected_prev[1];
	end
	if (
		( RI_expected_prev[2] !== 1'bx ) && ( RI_prev[2] !== RI_expected_prev[2] )
		&& ((RI_expected_prev[2] !== last_RI_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_expected_prev);
		$display ("     Real value = %b", RI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RI_exp[2] = RI_expected_prev[2];
	end
	if (
		( RI_expected_prev[3] !== 1'bx ) && ( RI_prev[3] !== RI_expected_prev[3] )
		&& ((RI_expected_prev[3] !== last_RI_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_expected_prev);
		$display ("     Real value = %b", RI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RI_exp[3] = RI_expected_prev[3];
	end
	if (
		( RI_expected_prev[4] !== 1'bx ) && ( RI_prev[4] !== RI_expected_prev[4] )
		&& ((RI_expected_prev[4] !== last_RI_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_expected_prev);
		$display ("     Real value = %b", RI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RI_exp[4] = RI_expected_prev[4];
	end
	if (
		( RI_expected_prev[5] !== 1'bx ) && ( RI_prev[5] !== RI_expected_prev[5] )
		&& ((RI_expected_prev[5] !== last_RI_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_expected_prev);
		$display ("     Real value = %b", RI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RI_exp[5] = RI_expected_prev[5];
	end
	if (
		( RI_expected_prev[6] !== 1'bx ) && ( RI_prev[6] !== RI_expected_prev[6] )
		&& ((RI_expected_prev[6] !== last_RI_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_expected_prev);
		$display ("     Real value = %b", RI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RI_exp[6] = RI_expected_prev[6];
	end
	if (
		( RI_expected_prev[7] !== 1'bx ) && ( RI_prev[7] !== RI_expected_prev[7] )
		&& ((RI_expected_prev[7] !== last_RI_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_expected_prev);
		$display ("     Real value = %b", RI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RI_exp[7] = RI_expected_prev[7];
	end
	if (
		( RX_expected_prev[0] !== 1'bx ) && ( RX_prev[0] !== RX_expected_prev[0] )
		&& ((RX_expected_prev[0] !== last_RX_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RX_expected_prev);
		$display ("     Real value = %b", RX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RX_exp[0] = RX_expected_prev[0];
	end
	if (
		( RX_expected_prev[1] !== 1'bx ) && ( RX_prev[1] !== RX_expected_prev[1] )
		&& ((RX_expected_prev[1] !== last_RX_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RX_expected_prev);
		$display ("     Real value = %b", RX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RX_exp[1] = RX_expected_prev[1];
	end
	if (
		( RX_expected_prev[2] !== 1'bx ) && ( RX_prev[2] !== RX_expected_prev[2] )
		&& ((RX_expected_prev[2] !== last_RX_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RX_expected_prev);
		$display ("     Real value = %b", RX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RX_exp[2] = RX_expected_prev[2];
	end
	if (
		( RX_expected_prev[3] !== 1'bx ) && ( RX_prev[3] !== RX_expected_prev[3] )
		&& ((RX_expected_prev[3] !== last_RX_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RX_expected_prev);
		$display ("     Real value = %b", RX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RX_exp[3] = RX_expected_prev[3];
	end
	if (
		( RX_expected_prev[4] !== 1'bx ) && ( RX_prev[4] !== RX_expected_prev[4] )
		&& ((RX_expected_prev[4] !== last_RX_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RX_expected_prev);
		$display ("     Real value = %b", RX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RX_exp[4] = RX_expected_prev[4];
	end
	if (
		( RX_expected_prev[5] !== 1'bx ) && ( RX_prev[5] !== RX_expected_prev[5] )
		&& ((RX_expected_prev[5] !== last_RX_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RX_expected_prev);
		$display ("     Real value = %b", RX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RX_exp[5] = RX_expected_prev[5];
	end
	if (
		( RX_expected_prev[6] !== 1'bx ) && ( RX_prev[6] !== RX_expected_prev[6] )
		&& ((RX_expected_prev[6] !== last_RX_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RX_expected_prev);
		$display ("     Real value = %b", RX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RX_exp[6] = RX_expected_prev[6];
	end
	if (
		( RX_expected_prev[7] !== 1'bx ) && ( RX_prev[7] !== RX_expected_prev[7] )
		&& ((RX_expected_prev[7] !== last_RX_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RX_expected_prev);
		$display ("     Real value = %b", RX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RX_exp[7] = RX_expected_prev[7];
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Ramses_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CargaA;
reg CargaB;
reg CargaC;
reg CargaNZ;
reg CargaPC;
reg CargaRDM;
reg CargaREM;
reg CargaRI;
reg CargaX;
reg clk;
reg clr;
reg EnCount;
reg IncPC;
reg [7:0] LidoMem;
reg op0;
reg op1;
reg op2;
reg RCount;
reg s0;
reg s1;
reg s2;
reg s3;
// wires                                               
wire C;
wire [3:0] Count;
wire N;
wire [7:0] PC;
wire [7:0] RA;
wire [7:0] RB;
wire [7:0] RDM;
wire [7:0] REM;
wire [7:0] RI;
wire [7:0] RX;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Ramses i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.CargaA(CargaA),
	.CargaB(CargaB),
	.CargaC(CargaC),
	.CargaNZ(CargaNZ),
	.CargaPC(CargaPC),
	.CargaRDM(CargaRDM),
	.CargaREM(CargaREM),
	.CargaRI(CargaRI),
	.CargaX(CargaX),
	.clk(clk),
	.clr(clr),
	.Count(Count),
	.EnCount(EnCount),
	.IncPC(IncPC),
	.LidoMem(LidoMem),
	.N(N),
	.op0(op0),
	.op1(op1),
	.op2(op2),
	.PC(PC),
	.RA(RA),
	.RB(RB),
	.RCount(RCount),
	.RDM(RDM),
	.REM(REM),
	.RI(RI),
	.RX(RX),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.Z(Z)
);
// LidoMem[ 7 ]
initial
begin
	LidoMem[7] = 1'b0;
	LidoMem[7] = #120000 1'b1;
	LidoMem[7] = #60000 1'b0;
	LidoMem[7] = #300000 1'b1;
	LidoMem[7] = #300000 1'b0;
	LidoMem[7] = #60000 1'b1;
	LidoMem[7] = #60000 1'b0;
end 
// LidoMem[ 6 ]
initial
begin
	LidoMem[6] = 1'b1;
	LidoMem[6] = #120000 1'b0;
	LidoMem[6] = #180000 1'b1;
	LidoMem[6] = #120000 1'b0;
	LidoMem[6] = #60000 1'b1;
	LidoMem[6] = #120000 1'b0;
	LidoMem[6] = #60000 1'b1;
	LidoMem[6] = #300000 1'b0;
end 
// LidoMem[ 5 ]
initial
begin
	LidoMem[5] = 1'b1;
	LidoMem[5] = #60000 1'b0;
	LidoMem[5] = #60000 1'b1;
	LidoMem[5] = #120000 1'b0;
	LidoMem[5] = #420000 1'b1;
	LidoMem[5] = #60000 1'b0;
	LidoMem[5] = #120000 1'b1;
end 
// LidoMem[ 4 ]
initial
begin
	LidoMem[4] = 1'b1;
	LidoMem[4] = #60000 1'b0;
	LidoMem[4] = #300000 1'b1;
	LidoMem[4] = #60000 1'b0;
	LidoMem[4] = #120000 1'b1;
	LidoMem[4] = #180000 1'b0;
	LidoMem[4] = #120000 1'b1;
	LidoMem[4] = #60000 1'b0;
	LidoMem[4] = #60000 1'b1;
end 
// LidoMem[ 3 ]
initial
begin
	LidoMem[3] = 1'b0;
	LidoMem[3] = #180000 1'b1;
	LidoMem[3] = #60000 1'b0;
	LidoMem[3] = #300000 1'b1;
	LidoMem[3] = #120000 1'b0;
	LidoMem[3] = #120000 1'b1;
	LidoMem[3] = #60000 1'b0;
	LidoMem[3] = #60000 1'b1;
	LidoMem[3] = #60000 1'b0;
end 
// LidoMem[ 2 ]
initial
begin
	LidoMem[2] = 1'b1;
	LidoMem[2] = #120000 1'b0;
	LidoMem[2] = #120000 1'b1;
	LidoMem[2] = #420000 1'b0;
	LidoMem[2] = #120000 1'b1;
	LidoMem[2] = #180000 1'b0;
end 
// LidoMem[ 1 ]
initial
begin
	LidoMem[1] = 1'b1;
	LidoMem[1] = #60000 1'b0;
	LidoMem[1] = #60000 1'b1;
	LidoMem[1] = #60000 1'b0;
	LidoMem[1] = #60000 1'b1;
	LidoMem[1] = #120000 1'b0;
	LidoMem[1] = #60000 1'b1;
	LidoMem[1] = #300000 1'b0;
end 
// LidoMem[ 0 ]
initial
begin
	LidoMem[0] = 1'b0;
	LidoMem[0] = #180000 1'b1;
	LidoMem[0] = #60000 1'b0;
	LidoMem[0] = #60000 1'b1;
	LidoMem[0] = #120000 1'b0;
	LidoMem[0] = #60000 1'b1;
	LidoMem[0] = #60000 1'b0;
	LidoMem[0] = #120000 1'b1;
	LidoMem[0] = #60000 1'b0;
	LidoMem[0] = #120000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// clr
initial
begin
	clr = 1'b1;
	clr = #10000 1'b0;
end 

// s1
initial
begin
	s1 = 1'b0;
	s1 = #340000 1'b1;
	s1 = #20000 1'b0;
	s1 = #480000 1'b1;
	s1 = #20000 1'b0;
end 

// s0
initial
begin
	s0 = 1'b0;
	s0 = #740000 1'b1;
	s0 = #20000 1'b0;
end 

// s2
initial
begin
	s2 = 1'b0;
end 

// s3
initial
begin
	s3 = 1'b0;
	s3 = #340000 1'b1;
	s3 = #20000 1'b0;
end 

// op2
initial
begin
	op2 = 1'b1;
	op2 = #340000 1'b0;
	op2 = #20000 1'b1;
	op2 = #480000 1'b0;
	op2 = #20000 1'b1;
end 

// op1
initial
begin
	op1 = 1'b1;
	op1 = #340000 1'b0;
	op1 = #20000 1'b1;
	op1 = #480000 1'b0;
	op1 = #20000 1'b1;
end 

// op0
initial
begin
	op0 = 1'b1;
	op0 = #340000 1'b0;
	op0 = #20000 1'b1;
	op0 = #380000 1'b0;
	op0 = #20000 1'b1;
end 

// CargaPC
initial
begin
	CargaPC = 1'b0;
	CargaPC = #340000 1'b1;
	CargaPC = #20000 1'b0;
end 

// IncPC
initial
begin
	IncPC = 1'b1;
	IncPC = #160000 1'b0;
	IncPC = #780000 1'b1;
	IncPC = #20000 1'b0;
end 

// CargaRI
initial
begin
	CargaRI = 1'b0;
	CargaRI = #40000 1'b1;
	CargaRI = #20000 1'b0;
end 

// CargaRDM
initial
begin
	CargaRDM = 1'b0;
end 

// CargaREM
initial
begin
	CargaREM = 1'b0;
	CargaREM = #440000 1'b1;
	CargaREM = #20000 1'b0;
end 

// CargaA
initial
begin
	CargaA = 1'b0;
	CargaA = #40000 1'b1;
	CargaA = #20000 1'b0;
end 

// CargaB
initial
begin
	CargaB = 1'b0;
	CargaB = #140000 1'b1;
	CargaB = #20000 1'b0;
	CargaB = #480000 1'b1;
	CargaB = #20000 1'b0;
	CargaB = #80000 1'b1;
	CargaB = #20000 1'b0;
end 

// CargaX
initial
begin
	CargaX = 1'b0;
	CargaX = #240000 1'b1;
	CargaX = #20000 1'b0;
	CargaX = #580000 1'b1;
	CargaX = #20000 1'b0;
end 

// CargaNZ
initial
begin
	CargaNZ = 1'b0;
	CargaNZ = #340000 1'b1;
	CargaNZ = #20000 1'b0;
	CargaNZ = #380000 1'b1;
	CargaNZ = #20000 1'b0;
end 

// CargaC
initial
begin
	CargaC = 1'b0;
	CargaC = #340000 1'b1;
	CargaC = #20000 1'b0;
	CargaC = #380000 1'b1;
	CargaC = #20000 1'b0;
end 

// RCount
initial
begin
	RCount = 1'b0;
	RCount = #540000 1'b1;
	RCount = #20000 1'b0;
end 

// EnCount
initial
begin
	EnCount = 1'b1;
	EnCount = #940000 1'b0;
end 

Ramses_vlg_sample_tst tb_sample (
	.CargaA(CargaA),
	.CargaB(CargaB),
	.CargaC(CargaC),
	.CargaNZ(CargaNZ),
	.CargaPC(CargaPC),
	.CargaRDM(CargaRDM),
	.CargaREM(CargaREM),
	.CargaRI(CargaRI),
	.CargaX(CargaX),
	.clk(clk),
	.clr(clr),
	.EnCount(EnCount),
	.IncPC(IncPC),
	.LidoMem(LidoMem),
	.op0(op0),
	.op1(op1),
	.op2(op2),
	.RCount(RCount),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.sampler_tx(sampler)
);

Ramses_vlg_check_tst tb_out(
	.C(C),
	.Count(Count),
	.N(N),
	.PC(PC),
	.RA(RA),
	.RB(RB),
	.RDM(RDM),
	.REM(REM),
	.RI(RI),
	.RX(RX),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

