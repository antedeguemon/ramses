// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/10/2017 14:37:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Ramses
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Ramses_vlg_sample_tst(
	clk,
	clr,
	Executa,
	sel0,
	sel1,
	sel2,
	sampler_tx
);
input  clk;
input  clr;
input  Executa;
input  sel0;
input  sel1;
input  sel2;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clr or Executa or sel0 or sel1 or sel2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Ramses_vlg_check_tst (
	C,
	N,
	Seg0,
	Seg1,
	Z,
	sampler_rx
);
input  C;
input  N;
input [6:0] Seg0;
input [6:0] Seg1;
input  Z;
input sampler_rx;

reg  C_expected;
reg  N_expected;
reg [6:0] Seg0_expected;
reg [6:0] Seg1_expected;
reg  Z_expected;

reg  C_prev;
reg  N_prev;
reg [6:0] Seg0_prev;
reg [6:0] Seg1_prev;
reg  Z_prev;

reg  C_expected_prev;
reg  N_expected_prev;
reg  Z_expected_prev;

reg  last_C_exp;
reg  last_N_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	N_prev = N;
	Seg0_prev = Seg0;
	Seg1_prev = Seg1;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	C_expected_prev = C_expected;
	N_expected_prev = N_expected;
	Z_expected_prev = Z_expected;
end



// expected N
initial
begin
	N_expected = 1'bX;
	N_expected = #999000 1'b0;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
	Z_expected = #999000 1'b0;
end 

// expected C
initial
begin
	C_expected = 1'bX;
	C_expected = #999000 1'b0;
end 
// generate trigger
always @(C_expected or C or N_expected or N or Seg0_expected or Seg0 or Seg1_expected or Seg1 or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected N = %b | expected Seg0 = %b | expected Seg1 = %b | expected Z = %b | ",C_expected_prev,N_expected_prev,Seg0_expected_prev,Seg1_expected_prev,Z_expected_prev);
	$display("| real C = %b | real N = %b | real Seg0 = %b | real Seg1 = %b | real Z = %b | ",C_prev,N_prev,Seg0_prev,Seg1_prev,Z_prev);
`endif
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Ramses_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg Executa;
reg sel0;
reg sel1;
reg sel2;
// wires                                               
wire C;
wire N;
wire [6:0] Seg0;
wire [6:0] Seg1;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Ramses i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.clk(clk),
	.clr(clr),
	.Executa(Executa),
	.N(N),
	.Seg0(Seg0),
	.Seg1(Seg1),
	.sel0(sel0),
	.sel1(sel1),
	.sel2(sel2),
	.Z(Z)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// clr
initial
begin
	clr = 1'b1;
	clr = #210000 1'b0;
end 

// Executa
initial
begin
	Executa = 1'b1;
	Executa = #999000 1'b0;
end 

// sel0
initial
begin
	sel0 = 1'b0;
end 

// sel1
initial
begin
	sel1 = 1'b0;
end 

// sel2
initial
begin
	sel2 = 1'b0;
end 

Ramses_vlg_sample_tst tb_sample (
	.clk(clk),
	.clr(clr),
	.Executa(Executa),
	.sel0(sel0),
	.sel1(sel1),
	.sel2(sel2),
	.sampler_tx(sampler)
);

Ramses_vlg_check_tst tb_out(
	.C(C),
	.N(N),
	.Seg0(Seg0),
	.Seg1(Seg1),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

